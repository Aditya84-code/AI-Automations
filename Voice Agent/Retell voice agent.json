{
  "name": "Retell voice agent",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "inbound",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -448,
        -16
      ],
      "id": "d70780ca-5067-4abc-a45b-ca8de95ded10",
      "name": "Webhook",
      "webhookId": "6b7b0f62-3fc6-4fa6-9790-40178240e8ed"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d92cb25e-20d2-4ef4-a862-05dbb61dd8df",
              "leftValue": "={{ $json.body.event }}",
              "rightValue": "call_ended",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -224,
        -16
      ],
      "id": "0368e670-14ac-4926-906e-d4a862bed13e",
      "name": "If"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI assistant. Your task is to analyze the following call transcript and extract structured information from it.\n\n\nMake sure:\n- The extracted details are accurate and based only on the information in the transcript.\n- The \"summary\" field provides a concise overview of the call in 2â€“3 sentences.\n- If a field is missing or not mentioned, return null for that field.\n\nCurrent Date and Time is: {{ $now }}\n\nHere is the transcript:{{ $json.body.call.transcript }}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        32,
        -16
      ],
      "id": "adff6201-d164-4913-aa3b-7ee5af099f02",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        0,
        160
      ],
      "id": "b78e4b4a-e6a3-4b01-af89-ea4af387e4bd",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "nZKXPr9EcYPRZwCs",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"name\": \"<Full Name>\",\n  \"email\": \"<Email Address>\",\n  \"phone_number\": \"<Phone Number>\",\n  \"reason_for_visit\": \"<Reason for dental visit>\",\n  \"meeting_scheduled\": \"<Meeting Schedule day and time>\",\n  \"summary\": \"<Short summary of the call>\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        192,
        160
      ],
      "id": "628b233a-0da5-440c-889a-06ee5c9d5970",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1-E3MweZ4g_JQg2fyl4fKbpsdlyuAYvT3jkVp9hEi1Cw",
          "mode": "list",
          "cachedResultName": "Medical appointment",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-E3MweZ4g_JQg2fyl4fKbpsdlyuAYvT3jkVp9hEi1Cw/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1-E3MweZ4g_JQg2fyl4fKbpsdlyuAYvT3jkVp9hEi1Cw/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name ": "={{ $json.output.name }}",
            "Phone_no": "={{ $json.output.phone_number }}",
            "Email": "={{ $json.output.email }}",
            "Visting Reason": "={{ $json.output.reason_for_visit }}",
            "Meeting_schedule": "={{ $json.output.meeting_scheduled }}",
            "Summary": "={{ $json.output.summary }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Name ",
              "displayName": "Name ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone_no",
              "displayName": "Phone_no",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Visting Reason",
              "displayName": "Visting Reason",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Meeting_schedule",
              "displayName": "Meeting_schedule",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Summary",
              "displayName": "Summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        384,
        -16
      ],
      "id": "1691693d-7f7b-452b-9e52-8002a7e2a696",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "lnrYEcLeGtgSSXYg",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "83e128dd-8278-45be-91aa-994c90821d22",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "dfd570963f66daa8de8ab1ade05392186cc69eddd54632309bd587c2faeb7e2b"
  },
  "id": "54sfb4TV9Fws4O1o",
  "tags": []
}